org: ${file(../../../default.yml):org}
app: ${file(../../../default.yml):app}
frameworkVersion: ${file(../../../default.yml):frameworkVersion}

service: product-management

custom:
  tableName: 'product-${sls:stage}'
  webpack: ${file(../../../default.yml):custom.webpack}
  serverless-offline:
    httpPort: 3002
    babelOptions:
      presets: ["es2015"]
    # webpackConfig: 'webpack.config.js' # Name of webpack configuration file
    # includeModules: false # Node modules configuration for packaging
    # packager: 'yarn' # Packager that will be used to package your external modules
    # excludeFiles: src/**/*.test.js # Provide a glob for files to ignore
    # packagePath: '../../../package.json'

provider:
  name: aws
  runtime: nodejs16.x
  region: 'ap-southeast-1'
  environment:
    TABLE: ${self:custom.tableName}
    STATE: ${sls:stage}

# functions:
#   api:
#     handler: handler.handler
#     events:
#       - httpApi: '*'

functions:
  create:
    handler: handler.createProduct
    events:
      - http:
          path: products
          method: post
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - Fn::GetAtt: [ ProductsTable, Arn ]

  list:
    handler: handler.getListProduct
    events:
      - http:
          path: products
          method: get
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource:
          - Fn::GetAtt: [ ProductsTable, Arn ]
        
  get:
    handler: handler.getProduct
    events:
      - http:
          path: products/{id}
          method: get
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - Fn::GetAtt: [ ProductsTable, Arn ]
        
  update:
    handler: handler.updateProduct
    events:
      - http:
          path: products/{id}
          method: put
          cors: true 
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - Fn::GetAtt: [ ProductsTable, Arn ]

  delete:
    handler: handler.deleteProduct
    events:
      - http:
          path: products/{id}
          method: delete
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource:
          - Fn::GetAtt: [ ProductsTable, Arn ]

resources:
  - ${file(./resources/dynamoDB.yml)}

plugins: ${file(../../../default.yml):plugins}
