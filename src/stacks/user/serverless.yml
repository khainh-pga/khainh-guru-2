org: ${file(../../../default.yml):org}
app: ${file(../../../default.yml):app}
frameworkVersion: ${file(../../../default.yml):frameworkVersion}

service: user-management

custom: ${file(../../../default.yml):custom}

provider:
  name: aws
  runtime: nodejs16.x
  region: 'ap-southeast-1'
  environment:
    TABLE: ${self:custom.USER_TABLE}
    STATE: ${sls:stage}

functions:
  create:
    handler: handler.createUser
    events:
      - http:
          path: users
          method: post
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - Fn::GetAtt: [ UsersTable, Arn ]

  list:
    handler: handler.getListUser
    events:
      - http:
          path: users
          method: get
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource:
          - Fn::GetAtt: [ UsersTable, Arn ]
        
  get:
    handler: handler.getUser
    events:
      - http:
          path: users/{id}
          method: get
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - Fn::GetAtt: [ UsersTable, Arn ]
        
  update:
    handler: handler.updateUser
    events:
      - http:
          path: users/{id}
          method: put
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - Fn::GetAtt: [ UsersTable, Arn ]

  delete:
    handler: handler.deleteUser
    events:
      - http:
          path: users/{id}
          method: delete
          cors: true 
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource:
          - Fn::GetAtt: [ UsersTable, Arn ]

resources:
  - ${file(./resources/dynamoDB.yml)}

plugins: ${file(../../../default.yml):plugins}
