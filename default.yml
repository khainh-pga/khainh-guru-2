org: huukhai0510
app: khainh-guru
frameworkVersion: ">=3.23.0"

# Load environment variables from .env files (default: false)
# See https://www.serverless.com/framework/docs/environment-variables
useDotenv: true

# Custom configuration. This is where Serverless Framework plugins get their
# configuration from.
custom:
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  stage: ${self:custom.currentStage}
  GLUE_DATABASE: 'user-product-${sls:stage}'
  USER_TABLE: 'users-table-${sls:stage}'
  PRODUCT_TABLE: 'product-${sls:stage}'
  S3_BUCKET_NAME: 'user-product-${sls:stage}'
  S3_LOG_BUCKET_NAME: 'user-product-logs-${sls:stage}'
  ArtifactBucketName: 'Art-${sls:stage}'
  StagingDir: data/test-stage/
  resourcesPrefix: ${self:service}-${self:custom.currentStage}
  webpack:
    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
    includeModules: true   # Node modules configuration for packaging
    packager: 'yarn'   # Packager that will be used to package your external modules
    excludeFiles: ./**/*.test.js # Provide a glob for files to ignore
    # packagePath: '../../package.json'
  serverless-offline:
    httpPort: 3001
    babelOptions:
      presets: ["es2015"]
  # stage: ${opt:stage, self:provider.stage}
  splitStacks:
    perFunction: false
    perType: false

  # Merge per-function IAM role configuration with the provider-level role
  # configuration.
  serverless-iam-roles-per-function:
    defaultInherit: true

package:
  individually: true

# Serverless plugins. The "split-stacks" plugin is used to generate nested
# CloudFormation stacks to work around the hard limit of 200 resources per
# stack.
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-iam-roles-per-function
  - serverless-plugin-split-stacks
